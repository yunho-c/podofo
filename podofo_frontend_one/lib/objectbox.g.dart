// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/data/document_entity.dart';
import 'src/data/thumbnail_entity.dart';
import 'src/providers/user_state_provider.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 892949797226551813),
    name: 'DocumentEntity',
    lastPropertyId: const obx_int.IdUid(3, 4052886656905752128),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2723093166415911532),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 288813176142781929),
        name: 'filePath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4052886656905752128),
        name: 'lastOpenedPage',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 3363719076893792824),
    name: 'ThumbnailEntity',
    lastPropertyId: const obx_int.IdUid(4, 1073596380333381628),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6586970717967998531),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1112441783418710889),
        name: 'filePath',
        type: 9,
        flags: 8,
        indexId: const obx_int.IdUid(1, 4434960590162131309),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8686004414725114554),
        name: 'pageNumber',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1073596380333381628),
        name: 'thumbnailData',
        type: 23,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 6978279246222423302),
    name: 'UserState',
    lastPropertyId: const obx_int.IdUid(12, 6500702086585218178),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 188818795431092893),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7702284734605549523),
        name: 'appearance',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6722573925179636413),
        name: 'highlight',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6531013531422759696),
        name: 'highlightColor',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4220086204996451028),
        name: 'previousPosition',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6758838385841374197),
        name: 'audioReader',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2323057399509311853),
        name: 'useKeyboardShortcutsToPlayPause',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6255649704887032057),
        name: 'commandClickToReadSentence',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 773281826864018078),
        name: 'audioBackend',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 3428914027084164101),
        name: 'audioVoice',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 8695437590385941028),
        name: 'audioSpeed',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 6500702086585218178),
        name: 'selectedText',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 6978279246222423302),
    lastIndexId: const obx_int.IdUid(1, 4434960590162131309),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    DocumentEntity: obx_int.EntityDefinition<DocumentEntity>(
      model: _entities[0],
      toOneRelations: (DocumentEntity object) => [],
      toManyRelations: (DocumentEntity object) => {},
      getId: (DocumentEntity object) => object.id,
      setId: (DocumentEntity object, int id) {
        object.id = id;
      },
      objectToFB: (DocumentEntity object, fb.Builder fbb) {
        final filePathOffset = fbb.writeString(object.filePath);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, filePathOffset);
        fbb.addInt64(2, object.lastOpenedPage);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final filePathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final lastOpenedPageParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          8,
        );
        final object = DocumentEntity(
          id: idParam,
          filePath: filePathParam,
          lastOpenedPage: lastOpenedPageParam,
        );

        return object;
      },
    ),
    ThumbnailEntity: obx_int.EntityDefinition<ThumbnailEntity>(
      model: _entities[1],
      toOneRelations: (ThumbnailEntity object) => [],
      toManyRelations: (ThumbnailEntity object) => {},
      getId: (ThumbnailEntity object) => object.id,
      setId: (ThumbnailEntity object, int id) {
        object.id = id;
      },
      objectToFB: (ThumbnailEntity object, fb.Builder fbb) {
        final filePathOffset = object.filePath == null
            ? null
            : fbb.writeString(object.filePath!);
        final thumbnailDataOffset = object.thumbnailData == null
            ? null
            : fbb.writeListInt8(object.thumbnailData!);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, filePathOffset);
        fbb.addInt64(2, object.pageNumber);
        fbb.addOffset(3, thumbnailDataOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final filePathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final pageNumberParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          8,
        );
        final thumbnailDataParam =
            const fb.Uint8ListReader(
                  lazy: false,
                ).vTableGetNullable(buffer, rootOffset, 10)
                as Uint8List?;
        final object = ThumbnailEntity(
          filePath: filePathParam,
          pageNumber: pageNumberParam,
          thumbnailData: thumbnailDataParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    UserState: obx_int.EntityDefinition<UserState>(
      model: _entities[2],
      toOneRelations: (UserState object) => [],
      toManyRelations: (UserState object) => {},
      getId: (UserState object) => object.id,
      setId: (UserState object, int id) {
        object.id = id;
      },
      objectToFB: (UserState object, fb.Builder fbb) {
        final appearanceOffset = fbb.writeString(object.appearance);
        final highlightColorOffset = object.highlightColor == null
            ? null
            : fbb.writeString(object.highlightColor!);
        final previousPositionOffset = object.previousPosition == null
            ? null
            : fbb.writeString(object.previousPosition!);
        final audioBackendOffset = fbb.writeString(object.audioBackend);
        final audioVoiceOffset = object.audioVoice == null
            ? null
            : fbb.writeString(object.audioVoice!);
        final selectedTextOffset = object.selectedText == null
            ? null
            : fbb.writeString(object.selectedText!);
        fbb.startTable(13);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, appearanceOffset);
        fbb.addBool(2, object.highlight);
        fbb.addOffset(3, highlightColorOffset);
        fbb.addOffset(4, previousPositionOffset);
        fbb.addBool(5, object.audioReader);
        fbb.addBool(6, object.useKeyboardShortcutsToPlayPause);
        fbb.addBool(7, object.commandClickToReadSentence);
        fbb.addOffset(8, audioBackendOffset);
        fbb.addOffset(9, audioVoiceOffset);
        fbb.addFloat64(10, object.audioSpeed);
        fbb.addOffset(11, selectedTextOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = UserState()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..appearance = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..highlight = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            8,
            false,
          )
          ..highlightColor = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 10)
          ..previousPosition = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 12)
          ..audioReader = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            14,
            false,
          )
          ..useKeyboardShortcutsToPlayPause = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            16,
            false,
          )
          ..commandClickToReadSentence = const fb.BoolReader().vTableGet(
            buffer,
            rootOffset,
            18,
            false,
          )
          ..audioBackend = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 20, '')
          ..audioVoice = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 22)
          ..audioSpeed = const fb.Float64Reader().vTableGet(
            buffer,
            rootOffset,
            24,
            0,
          )
          ..selectedText = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 26);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [DocumentEntity] entity fields to define ObjectBox queries.
class DocumentEntity_ {
  /// See [DocumentEntity.id].
  static final id = obx.QueryIntegerProperty<DocumentEntity>(
    _entities[0].properties[0],
  );

  /// See [DocumentEntity.filePath].
  static final filePath = obx.QueryStringProperty<DocumentEntity>(
    _entities[0].properties[1],
  );

  /// See [DocumentEntity.lastOpenedPage].
  static final lastOpenedPage = obx.QueryIntegerProperty<DocumentEntity>(
    _entities[0].properties[2],
  );
}

/// [ThumbnailEntity] entity fields to define ObjectBox queries.
class ThumbnailEntity_ {
  /// See [ThumbnailEntity.id].
  static final id = obx.QueryIntegerProperty<ThumbnailEntity>(
    _entities[1].properties[0],
  );

  /// See [ThumbnailEntity.filePath].
  static final filePath = obx.QueryStringProperty<ThumbnailEntity>(
    _entities[1].properties[1],
  );

  /// See [ThumbnailEntity.pageNumber].
  static final pageNumber = obx.QueryIntegerProperty<ThumbnailEntity>(
    _entities[1].properties[2],
  );

  /// See [ThumbnailEntity.thumbnailData].
  static final thumbnailData = obx.QueryByteVectorProperty<ThumbnailEntity>(
    _entities[1].properties[3],
  );
}

/// [UserState] entity fields to define ObjectBox queries.
class UserState_ {
  /// See [UserState.id].
  static final id = obx.QueryIntegerProperty<UserState>(
    _entities[2].properties[0],
  );

  /// See [UserState.appearance].
  static final appearance = obx.QueryStringProperty<UserState>(
    _entities[2].properties[1],
  );

  /// See [UserState.highlight].
  static final highlight = obx.QueryBooleanProperty<UserState>(
    _entities[2].properties[2],
  );

  /// See [UserState.highlightColor].
  static final highlightColor = obx.QueryStringProperty<UserState>(
    _entities[2].properties[3],
  );

  /// See [UserState.previousPosition].
  static final previousPosition = obx.QueryStringProperty<UserState>(
    _entities[2].properties[4],
  );

  /// See [UserState.audioReader].
  static final audioReader = obx.QueryBooleanProperty<UserState>(
    _entities[2].properties[5],
  );

  /// See [UserState.useKeyboardShortcutsToPlayPause].
  static final useKeyboardShortcutsToPlayPause =
      obx.QueryBooleanProperty<UserState>(_entities[2].properties[6]);

  /// See [UserState.commandClickToReadSentence].
  static final commandClickToReadSentence = obx.QueryBooleanProperty<UserState>(
    _entities[2].properties[7],
  );

  /// See [UserState.audioBackend].
  static final audioBackend = obx.QueryStringProperty<UserState>(
    _entities[2].properties[8],
  );

  /// See [UserState.audioVoice].
  static final audioVoice = obx.QueryStringProperty<UserState>(
    _entities[2].properties[9],
  );

  /// See [UserState.audioSpeed].
  static final audioSpeed = obx.QueryDoubleProperty<UserState>(
    _entities[2].properties[10],
  );

  /// See [UserState.selectedText].
  static final selectedText = obx.QueryStringProperty<UserState>(
    _entities[2].properties[11],
  );
}
